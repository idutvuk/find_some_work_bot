from openai import OpenAI

import logging
from variables import Variables

logger = logging.getLogger(__name__)
vars = Variables()

client = OpenAI()


async def filter_match(post_text: str) -> list:
    prompt = (
        """
        Ты — высококвалифицированный эксперт по анализу текста и автоматизированному подбору вакансий. Твоя задача — проанализировать текст поста о предложении работы или заказе и определить, насколько он соответствует заданному технологическому стеку.

        Входные данные:
        1. Пост (строка): текст с описанием вакансии или заказа.
        2. Фильтры (строка, содержащая список технологий или навыков): список ключевых слов/фраз, разделённых запятыми или в виде массива.

        Твоя задача:
        - Для каждого фильтра оцени степень его соответствия тексту поста по шкале от 0 до 5, где:
        - 0 означает полное отсутствие упоминаний или связи с фильтром;
        - 5 означает полное соответствие и явное упоминание фильтра в контексте.
        При оценке учитывай:
        - Наличие прямых упоминаний, синонимов, аббревиатур и вариаций названия технологии.
        - Контекст использования термина в тексте.
        - Частоту и релевантность упоминаний.
        - Насколько этот заказ может быть актуален для человека, знающего этот стек. (Например, заказ о поиске 3D дизайнера актуален для "Визуализатор интерьеров" на 3/5)
        - Вывод: верни строку, состоящую из чисел (оценок), разделённых пробелами, при этом порядок оценок должен соответствовать порядку фильтров во входном списке.

        Пример:
        Если пост содержит упоминания о «Python», «Django» и «PostgreSQL», а фильтры: ["Python", "Java", "Django", "React"], то допустимый вывод: "5 0 5 0".
        Если пост не является предложением работы или заказом, его корреляция 0
        Не задавай дополнительных вопросов, просто проанализируй входной текст и выведи оценки согласно описанным правилам.
        """
        + f"Filters:\n'{vars.filters}'. "
    )
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": f"Post: {post_text}"},
            ],
            temperature=0.0,
        )
        answers = response.choices[0].message.content.split()
        logger.info(f"response: {answers}")
        return answers

    except Exception as e:
        logger.error(f"OpenAI API error: {e}")
        return False
